import pytest
from sha256lib import Word, Message, sha256

test_bin = "11111111 00000000 11111111 00000000"
test_bin2 = "00000000 11111111 00000000 11111111"
test_bin3 = "10101010 10101010 10101010 10101010"
test_bin4 = "11111111 11111111 11111111 11111111"
test_bin5 = "00000000 00000000 00000000 00000000"


@pytest.fixture
def w():
    return Word.from_bin(test_bin)


@pytest.fixture
def w2():
    return Word.from_bin(test_bin2)


@pytest.fixture
def w3():
    return Word.from_bin(test_bin3)


@pytest.fixture
def msg_abc() -> "Message":
    return Message.from_str('abc')


@pytest.fixture
def msg_long() -> "Message":
    return Message.from_str('af4764571f217a9bd2c50d8e97c54239bcacb15c835100e59fda84cb33603d14' * 2)


def test_word_static_method(w, w2):
    assert w.bin() == "0b" + test_bin.replace(" ", "")
    assert w.hex() == "0xff00ff00"
    print(w)
    assert w2.bin() == "0b" + test_bin2.replace(" ", "")
    assert w2.hex() == "0x00ff00ff"
    print(w2)


def test_shr(w):
    w_ = w.shr(8)
    assert w_.bin() == "0b" + test_bin2.replace(" ", "")
    w__ = w_.shr(8)
    assert w__.bin() == "0b" + "00000000000000001111111100000000"


def test_rotr(w, w2):
    assert w.rotr(8) == w2
    assert w2.rotr(8) == w


def test_xor(w, w2, w3):
    assert w.xor(w2) == Word.from_bin(test_bin4)
    assert w.xor(w2, w3) == Word.from_bin(
        "01010101 01010101 01010101 01010101")


def test_add():
    bins = [
        '0b01000000000000001111111111111111',
        '0b01000000000000000000000000000000',
        '0b01000000000000000000000000000000',
        '0b01000000000000000000000000000000',
        '0b01000000000000000000000000000000',
    ]
    words = [Word.from_bin(b) for b in bins]
    s = words[0] + words[1] + words[2] + words[3] + words[4]
    assert s == words[0].add(words[1], words[2], words[3], words[4])
    assert s.bin() == "0b01000000000000001111111111111111"


def test_sigma0():
    data = "0b00000000000000000011111111111111"
    result = "0b11110001111111111100011110000000"
    w = Word.from_bin(data)
    w_ = w.sigma0()
    assert w_.bin() == result


def test_ch():
    x = 0b00000000111111110000000011111111
    y = 0b00000000000000001111111111111111
    z = 0b11111111111111110000000000000000
    wx = Word.from_int(x)
    wy = Word.from_int(y)
    wz = Word.from_int(z)
    res = wx.ch(wy, wz)
    assert res.bin() == "0b11111111000000000000000011111111"


def test_maj():
    x = 0b00000000111111110000000011111111
    y = 0b00000000000000001111111111111111
    z = 0b11011111111111110000000000010000
    wx = Word.from_int(x)
    wy = Word.from_int(y)
    wz = Word.from_int(z)
    res = wx.maj(wy, wz)
    assert res.bin() == "0b00000000111111110000000011111111"


def test_msg_padding(msg_abc, msg_long):
    expected = """01100001 01100010 01100011 10000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00011000"""
    expected_long = """01100001 01100110 00110100 00110111
00110110 00110100 00110101 00110111
00110001 01100110 00110010 00110001
00110111 01100001 00111001 01100010
01100100 00110010 01100011 00110101
00110000 01100100 00111000 01100101
00111001 00110111 01100011 00110101
00110100 00110010 00110011 00111001
01100010 01100011 01100001 01100011
01100010 00110001 00110101 01100011
00111000 00110011 00110101 00110001
00110000 00110000 01100101 00110101
00111001 01100110 01100100 01100001
00111000 00110100 01100011 01100010
00110011 00110011 00110110 00110000
00110011 01100100 00110001 00110100
01100001 01100110 00110100 00110111
00110110 00110100 00110101 00110111
00110001 01100110 00110010 00110001
00110111 01100001 00111001 01100010
01100100 00110010 01100011 00110101
00110000 01100100 00111000 01100101
00111001 00110111 01100011 00110101
00110100 00110010 00110011 00111001
01100010 01100011 01100001 01100011
01100010 00110001 00110101 01100011
00111000 00110011 00110101 00110001
00110000 00110000 01100101 00110101
00111001 01100110 01100100 01100001
00111000 00110100 01100011 01100010
00110011 00110011 00110110 00110000
00110011 01100100 00110001 00110100
10000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000100 00000000"""
    assert msg_abc.padded_msg_bin() == '0b' + expected.replace(" ", "").replace("\n", "")
    assert msg_long.padded_msg_bin() == '0b' + \
        expected_long.replace(" ", "").replace("\n", "")


def test_blocks(msg_abc):
    assert msg_abc.padded_msg.hex() == msg_abc.blocks[0].hex()


def test_schedule(msg_abc):
    w0_expected = "01100001011000100110001110000000"
    w15_expected = "00000000000000000000000000011000"
    w63_expected = "00010010101100011110110111101011"
    schedule = msg_abc.get_schedule(0)
    assert schedule[0].bin() == '0b' + w0_expected
    assert schedule[15].bin() == '0b' + w15_expected
    assert schedule[63].bin() == '0b' + w63_expected


def test_sha256(msg_abc, msg_long):
    sha256_abc = 'ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad'
    sha256_long = '9e744ce2d42e164c921c8db1cd0efdf5f15e9ff5218848a7a525c3aa3cd1ecb7'
    assert sha256(msg_abc) == sha256_abc
    assert sha256(msg_long) == sha256_long
